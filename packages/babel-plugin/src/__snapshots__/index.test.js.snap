// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin aggressive import should work with destructuration 1`] = `
"import loadable from '@loadable/component';
loadable({
  chunkName({
    foo
  }) {
    return \`\${foo}\`;
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: ({
    foo
  }) => import(
  /* webpackChunkName: \\"[request]\\" */
  \`./\${foo}\`),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve({
    foo
  }) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./\${foo}\`);
    }

    return require('path').resolve(__dirname, \`./\${foo}\`);
  }

});"
`;

exports[`plugin aggressive import with "webpackChunkName" should replace it 1`] = `
"import loadable from '@loadable/component';
loadable({
  chunkName(props) {
    return \`\${props.foo}\`;
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: props => import(
  /* webpackChunkName: \\"[request]\\" */
  \`./\${props.foo}\`),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve(props) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./\${props.foo}\`);
    }

    return require('path').resolve(__dirname, \`./\${props.foo}\`);
  }

});"
`;

exports[`plugin aggressive import without "webpackChunkName" should add it 1`] = `
"import loadable from '@loadable/component';
loadable({
  chunkName(props) {
    return \`\${props.foo}\`;
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: props => import(
  /* webpackChunkName: \\"[request]\\" */
  \`./\${props.foo}\`),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve(props) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./\${props.foo}\`);
    }

    return require('path').resolve(__dirname, \`./\${props.foo}\`);
  }

});"
`;

exports[`plugin load should support naming 1`] = `
"import Loadable from '@loadable/component';
Loadable({
  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return require('path').resolve(__dirname, \\"moment\\");
  }

});"
`;

exports[`plugin load.lib should support naming too 1`] = `
"import Loadable from '@loadable/component';
Loadable.lib({
  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return require('path').resolve(__dirname, \\"moment\\");
  }

});"
`;

exports[`plugin loadable.lib should be transpiled too 1`] = `
"import loadable from '@loadable/component';
loadable.lib({
  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return require('path').resolve(__dirname, \\"moment\\");
  }

});"
`;

exports[`plugin simple import in a complex promise should work 1`] = `
"import loadable from '@loadable/component';
loadable({
  chunkName() {
    return \\"ModA\\";
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: () => timeout(import(
  /* webpackChunkName: \\"ModA\\" */
  './ModA'), 2000),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"./ModA\\");
    }

    return require('path').resolve(__dirname, \\"./ModA\\");
  }

});"
`;

exports[`plugin simple import should work with template literal 1`] = `
"import loadable from '@loadable/component';
loadable({
  chunkName() {
    return \`ModA\`;
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: () => import(
  /* webpackChunkName: \\"ModA\\" */
  \`./ModA\`),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./ModA\`);
    }

    return require('path').resolve(__dirname, \`./ModA\`);
  }

});"
`;

exports[`plugin simple import with "webpackChunkName" comment should use it 1`] = `
"import loadable from '@loadable/component';
loadable({
  chunkName() {
    return \\"ChunkA\\";
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: () => import(
  /* webpackChunkName: \\"ChunkA\\" */
  './ModA'),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"./ModA\\");
    }

    return require('path').resolve(__dirname, \\"./ModA\\");
  }

});"
`;

exports[`plugin simple import without "webpackChunkName" comment should add it 1`] = `
"import loadable from '@loadable/component';
loadable({
  chunkName() {
    return \\"ModA\\";
  },

  isReady(props) {
    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[this.resolve(props)];
    }

    return false;
  },

  requireAsync: () => import(
  /* webpackChunkName: \\"ModA\\" */
  './ModA'),

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"./ModA\\");
    }

    return require('path').resolve(__dirname, \\"./ModA\\");
  }

});"
`;
